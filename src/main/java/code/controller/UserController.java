package code.controller;


import code.entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import code.repository.UserRepository;

import java.util.Map;
import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;

    @RequestMapping(value = "/login", method = RequestMethod.POST)
    public ResponseEntity<Object> login(@RequestBody Map<String, String> json) {

        String username = json.get("username");
        String password = json.get("password");
        User u = userRepository.findByUsername(username);

      if (username.equals("") || password.equals("")) {
            return ResponseEntity.status(500).body("{}");
      }

        if (u==null) {
            // UTILISATEUR INCONNU
           return ResponseEntity.status(200).body("{ username: " +username + ", password: " + password+ "}");
        } else {
            if (password.equals(u.getPassword())) {
                // CONNEXION
                return ResponseEntity.status(201).body("{ username: " +username + ", password: " + password+ "}");
            } else {
                // ERREUR DE MOT DE PASSE
                return ResponseEntity.status(202).body("{ username: " +username + ", password: " + password+ "}");
            }
        }
    }

    @PostMapping(path="/register")
    public ResponseEntity<?> addNewUser (@RequestBody Map<String,String> json) {

        String username = json.get("username");
        String password = json.get("password");
        String mail = json.get("mail");
        User u = userRepository.findByUsername(username);
        User y = userRepository.findByMail(mail);

       if (username.equals("") || mail.equals("") || password.equals("")) {
           return ResponseEntity.status(500).body("{}");
       }

        if (u!=null && username.equals(u.getUsername())) {
                //USERNAME DEJA UTILISE
                return ResponseEntity.status(200).body("{ username :" +username +", mail: "+mail+", password: " +password + "}");
        }

        if (y!=null && mail.equals(y.getMail())) {
                // MAIL DEJA UTILISE
                return ResponseEntity.status(202).body("{ username :" +username +", mail: "+mail+", password: " +password + "}");
        } else {
            // ENREGISTREMENT D'UN NOUVEL UTILISATEUR

            User n = new User();
            n.setUsername(username);
            n.setMail(mail);
            n.setPassword(password);
            userRepository.save(n);

            return ResponseEntity.status(201).body("{ username :" +username +", mail: "+mail+", password: " +password + "}");
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}